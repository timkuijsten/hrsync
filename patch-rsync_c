--- rsync.c.orig	Mon Jan 15 19:58:31 2018
+++ rsync.c	Sat May  5 20:03:04 2018
@@ -56,6 +56,11 @@
 extern char *iconv_opt;
 #endif
 
+/* options to change root and user */
+extern char *newroot;
+extern uid_t uiddrop;
+extern gid_t giddrop;
+
 #ifdef ICONV_CONST
 iconv_t ic_chck = (iconv_t)-1;
 # ifdef ICONV_OPTION
@@ -754,4 +759,77 @@
 	     : am_generator ? "generator"
 	     : am_receiver ? "receiver"
 	     : "Receiver"; /* pre-forked receiver */
+}
+
+/*
+ * Change the root of the process. Supports dropsuper mode.
+ *
+ * Return 0 on success, -1 on error with errno set.
+ */
+int
+do_chroot(const char *newroot)
+{
+	uid_t ouid;
+
+        /*
+         * We need to be the superuser to chroot so hopefully we're started as
+	 * the superuser.
+         */
+
+        if ((ouid = geteuid()) != 0)
+		if (seteuid(0) == -1)
+			return -1;
+
+	if (chroot(newroot) == -1) {
+		if (ouid)
+			if (seteuid(ouid) == -1)
+				return -1;
+		return -1;
+	}
+	if (chdir("/") == -1)
+		return -1;
+
+        if (ouid)
+		if (seteuid(ouid) == -1)
+			return -1;
+
+	return 0;
+}
+
+/*
+ * Drop superuser privileges irreversible.
+ *
+ * Return 0 on success, -1 on failure with errno set.
+ */
+int
+dropsuperuser(void)
+{
+	/* Make sure were requested to do something meaningful. */
+	if (uiddrop == 0) {
+		errno = EINVAL;
+		return -1;
+	}
+
+	/*
+	 * We need to be the superuser in order to clear supplementary group ids
+	 * and all three user and group ids.
+	 */
+
+	if (geteuid() != 0)
+		if (seteuid(0) == -1)
+			err(1,"seteuid");
+
+	/* set supplementary groups to the new group only */
+	if (setgroups(1, &giddrop) == -1)
+		return -1;
+
+	/* change real, effective and saved group-id */
+	if (setresgid(giddrop, giddrop, giddrop) == -1)
+		return -1;
+
+	/* change real, effective and saved user-id */
+	if (setresuid(uiddrop, uiddrop, uiddrop) == -1)
+		return -1;
+
+	return 0;
 }
